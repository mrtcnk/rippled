diff -U0 src/ed25519-donna.orig/ed25519-donna-batchverify.h src/ed25519-donna/ed25519-donna-batchverify.h
--- src/ed25519-donna.orig/ed25519-donna-batchverify.h	2024-01-17 11:01:01
+++ src/ed25519-donna/ed25519-donna-batchverify.h	2024-01-26 14:14:05
@@ -108 +108,2 @@
-	const bignum256modm_element_t topbit = ((bignum256modm_element_t)1 << (bignum256modm_bits_per_limb - 1));
+
+    const bignum256modm_element_t topbit = ((bignum256modm_element_t)1 << (bignum256modm_bits_per_limb - 1));
@@ -147 +148,5 @@
-	}
+
+
+    }
+
+
@@ -187,0 +193 @@
+
@@ -206 +212,74 @@
-	batch_heap ALIGN(16) batch;
+    batch_heap ALIGN(16) batch;
+    ge25519 ALIGN(16) p;
+    bignum256modm *r_scalars;
+    size_t i, batchsize;
+    unsigned char hram[64];
+    int ret = 0;
+
+    for (i = 0; i < num; i++)
+        valid[i] = 1;
+
+    while (num > 3) {
+        batchsize = (num > max_batch_size) ? max_batch_size : num;
+
+        /* generate r (scalars[batchsize+1]..scalars[2*batchsize] */
+        ED25519_FN(ed25519_randombytes_unsafe) (batch.r, batchsize * 16);
+        r_scalars = &batch.scalars[batchsize + 1];
+        for (i = 0; i < batchsize; i++)
+            expand256_modm(r_scalars[i], batch.r[i], 16);
+
+        /* compute scalars[0] = ((r1s1 + r2s2 + ...)) */
+        for (i = 0; i < batchsize; i++) {
+            expand256_modm(batch.scalars[i], RS[i] + 32, 32);
+            mul256_modm(batch.scalars[i], batch.scalars[i], r_scalars[i]);
+        }
+        for (i = 1; i < batchsize; i++)
+            add256_modm(batch.scalars[0], batch.scalars[0], batch.scalars[i]);
+
+        /* compute scalars[1]..scalars[batchsize] as r[i]*H(R[i],A[i],m[i]) */
+        for (i = 0; i < batchsize; i++) {
+            ed25519_hram(hram, RS[i], pk[i], m[i], mlen[i]);
+            expand256_modm(batch.scalars[i+1], hram, 64);
+            mul256_modm(batch.scalars[i+1], batch.scalars[i+1], r_scalars[i]);
+        }
+
+        /* compute points */
+        batch.points[0] = ge25519_basepoint;
+        for (i = 0; i < batchsize; i++)
+            if (!ge25519_unpack_negative_vartime(&batch.points[i+1], pk[i]))
+                goto fallback;
+        for (i = 0; i < batchsize; i++)
+            if (!ge25519_unpack_negative_vartime(&batch.points[batchsize+i+1], RS[i]))
+                goto fallback;
+
+        ge25519_multi_scalarmult_vartime(&p, &batch, (batchsize * 2) + 1);
+        if (!ge25519_is_neutral_vartime(&p)) {
+            ret |= 2;
+
+            fallback:
+            for (i = 0; i < batchsize; i++) {
+                valid[i] = ED25519_FN(ed25519_sign_open) (m[i], mlen[i], pk[i], RS[i]) ? 0 : 1;
+                ret |= (valid[i] ^ 1);
+            }
+        }
+
+        m += batchsize;
+        mlen += batchsize;
+        pk += batchsize;
+        RS += batchsize;
+        num -= batchsize;
+        valid += batchsize;
+    }
+
+    for (i = 0; i < num; i++) {
+        valid[i] = ED25519_FN(ed25519_sign_open) (m[i], mlen[i], pk[i], RS[i]) ? 0 : 1;
+        ret |= (valid[i] ^ 1);
+    }
+
+    return ret;
+}
+
+int
+ED25519_FN(ed25519_sign_open_batch_cofactored) (const unsigned char **m, size_t *mlen, const unsigned char **pk, const unsigned char **RS, size_t num, int *valid) {
+
+    batch_heap ALIGN(16) batch;
@@ -250 +329,8 @@
-		if (!ge25519_is_neutral_vartime(&p)) {
+
+        /* compute [8]p */
+        ge25519 ALIGN(16) p1, p2, p3;
+        ge25519_double(&p1,&p);
+        ge25519_double(&p2,&p1);
+        ge25519_double(&p3,&p2);
+
+        if (!ge25519_is_neutral_vartime(&p3)) {
@@ -255,0 +342 @@
+
diff -U0 src/ed25519-donna.orig/ed25519-donna-impl-base.h src/ed25519-donna/ed25519-donna-impl-base.h
--- src/ed25519-donna.orig/ed25519-donna-impl-base.h	2024-01-17 11:01:01
+++ src/ed25519-donna/ed25519-donna-impl-base.h	2024-01-26 14:14:05
@@ -291,0 +292 @@
+    ge25519_p1p1_to_full(r, &t);
diff -U0 src/ed25519-donna.orig/ed25519-donna-impl-sse2.h src/ed25519-donna/ed25519-donna-impl-sse2.h
--- src/ed25519-donna.orig/ed25519-donna-impl-sse2.h	2024-01-17 11:01:01
+++ src/ed25519-donna/ed25519-donna-impl-sse2.h	2024-01-26 14:14:05
@@ -322,0 +323 @@
+    ge25519_p1p1_to_full(r, &t);
diff -U0 src/ed25519-donna.orig/ed25519.c src/ed25519-donna/ed25519.c
--- src/ed25519-donna.orig/ed25519.c	2024-01-17 11:01:01
+++ src/ed25519-donna/ed25519.c	2024-01-26 14:14:05
@@ -21,0 +22 @@
+
@@ -25,0 +27,4 @@
+
+
+
+
@@ -92 +96,0 @@
-
@@ -95,4 +99,4 @@
-	ge25519 ALIGN(16) R, A;
-	hash_512bits hash;
-	bignum256modm hram, S;
-	unsigned char checkR[32];
+    ge25519 ALIGN(16) R, A;
+    hash_512bits hash;
+    bignum256modm hram, S;
+    unsigned char checkR[32];
@@ -100,2 +104,2 @@
-	if ((RS[63] & 224) || !ge25519_unpack_negative_vartime(&A, pk))
-		return -1;
+    if ((RS[63] & 224) || !ge25519_unpack_negative_vartime(&A, pk))
+        return -1;
@@ -103,3 +107,3 @@
-	/* hram = H(R,A,m) */
-	ed25519_hram(hash, RS, pk, m, mlen);
-	expand256_modm(hram, hash, 64);
+    /* hram = H(R,A,m) */
+    ed25519_hram(hash, RS, pk, m, mlen);
+    expand256_modm(hram, hash, 64);
@@ -107,2 +111,2 @@
-	/* S */
-	expand256_modm(S, RS + 32, 32);
+    /* S */
+    expand256_modm(S, RS + 32, 32);
@@ -110,3 +114,3 @@
-	/* SB - H(R,A,m)A */
-	ge25519_double_scalarmult_vartime(&R, &A, hram, S);
-	ge25519_pack(checkR, &R);
+    /* SB - H(R,A,m)A */
+    ge25519_double_scalarmult_vartime(&R, &A, hram, S);
+    ge25519_pack(checkR, &R);
@@ -114,2 +118,2 @@
-	/* check that R = SB - H(R,A,m)A */
-	return ed25519_verify(RS, checkR, 32) ? 0 : -1;
+    /* check that R = SB - H(R,A,m)A */
+    return ed25519_verify(RS, checkR, 32) ? 0 : -1;
@@ -117 +120,0 @@
-
@@ -118,0 +122,49 @@
+
+int
+ED25519_FN(ed25519_sign_open_cofactored) (const unsigned char *m, size_t mlen, const ed25519_public_key pk, const ed25519_signature RS) {
+    ge25519 ALIGN(16) R, A;
+    hash_512bits hash;
+    bignum256modm hram, S;
+    unsigned char checkR[32];
+
+    if ((RS[63] & 224) || !ge25519_unpack_negative_vartime(&A, pk))
+        return -1;
+
+    /* hram = H(R,A,m) */
+    ed25519_hram(hash, RS, pk, m, mlen);
+    expand256_modm(hram, hash, 64);
+
+    /* S */
+    expand256_modm(S, RS + 32, 32);
+
+    /* SB - H(R,A,m)A */
+    ge25519_double_scalarmult_vartime(&R, &A, hram, S);
+
+    unsigned char Rprime[32];
+    for (int i = 0; i < 32; i++) {
+        Rprime[i] = RS[i];
+    }
+    ge25519 ALIGN(16) Rprimepoint;
+
+    Rprime[31] = (Rprime[31] + 128) % 256;
+    ge25519_unpack_negative_vartime(&Rprimepoint, Rprime);
+    ge25519 ALIGN(16) Rprimepointneg;
+
+    curve25519_neg(Rprimepointneg.x, Rprimepoint.x);
+    curve25519_copy(Rprimepointneg.y, Rprimepoint.y);
+    curve25519_neg(Rprimepointneg.t, Rprimepoint.t);
+    curve25519_copy(Rprimepointneg.z, Rprimepoint.z);
+
+    ge25519 ALIGN(16) result, result1, result2, result3;
+    // result = sB - H(R,A,m)A - RS
+    ge25519_add(&result,&R,&Rprimepointneg);
+
+    ge25519_double(&result1,&result);
+    ge25519_double(&result2,&result1);
+    ge25519_double(&result3,&result2);
+
+    return ge25519_is_neutral_vartime(&result3) ? 0 : -1;
+
+}
+
+
diff -U0 src/ed25519-donna.orig/ed25519.h src/ed25519-donna/ed25519.h
--- src/ed25519-donna.orig/ed25519.h	2024-01-17 11:01:01
+++ src/ed25519-donna/ed25519.h	2024-01-26 14:14:05
@@ -17,0 +18,6 @@
+
+
+int ed25519_sign_open_cofactored(const unsigned char *m, size_t mlen, const ed25519_public_key pk, const ed25519_signature RS);
+int ed25519_sign_open_batch_cofactored(const unsigned char **m, size_t *mlen, const unsigned char **pk, const unsigned char **RS, size_t num, int *valid);
+
+
Common subdirectories: src/ed25519-donna.orig/fuzz and src/ed25519-donna/fuzz
